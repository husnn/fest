{
  "contractName": "ERC165Mock",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/mocks/ERC165Mock.sol\":\"ERC165Mock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/mocks/ERC165Mock.sol\":{\"keccak256\":\"0xb27b9cf460dfbc2f463e7fa1d5036939e3ed52cc57a9ca3f2d749aff87009f7f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5ca59f59b909dd9cd8fe0dafe9d067a798fdb542202529882d4f0d9f13bf0e19\",\"dweb:/ipfs/QmeWjqpwWHUjhX5fCDDawqSzTDZEcEHxnpsAiapTYSt8gv\"]},\"/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x071cfd008ed1810ddf23f56bd1ce2f0c3983bc291559067e94618547f579e1f2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a3235dc4cbf8fe1bde8426a0515c2d19205953cce2bef84e635a74b1b0140250\",\"dweb:/ipfs/QmcLniP23L9VH3rSdoE4YnLosayZELS38z6HJCZQ3Q4Vq2\"]},\"/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x7e30ce048ac2ce3cc97d725487ed5a82192bb939456f46e0cbe38f1b48644f9e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://93406f5266094615e2b829d0eb4a3a668c72a3a6562da91a9ea9044cd001dd80\",\"dweb:/ipfs/QmUqT5ZLn5HTvE4Bas9BA5RSCamz4p3KwbvEsNvNJ2taav\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506101c0806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a600480360381019061004591906100df565b610060565b604051610057919061011b565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000813590506100d981610173565b92915050565b6000602082840312156100f5576100f461016e565b5b6000610103848285016100ca565b91505092915050565b61011581610136565b82525050565b6000602082019050610130600083018461010c565b92915050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600080fd5b61017c81610142565b811461018757600080fd5b5056fea264697066735822122045f3341d20e1afe46abff83175e8310f21df87a73d5bf698298c34f3200975ea64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806301ffc9a714610030575b600080fd5b61004a600480360381019061004591906100df565b610060565b604051610057919061011b565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000813590506100d981610173565b92915050565b6000602082840312156100f5576100f461016e565b5b6000610103848285016100ca565b91505092915050565b61011581610136565b82525050565b6000602082019050610130600083018461010c565b92915050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600080fd5b61017c81610142565b811461018757600080fd5b5056fea264697066735822122045f3341d20e1afe46abff83175e8310f21df87a73d5bf698298c34f3200975ea64736f6c63430008070033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1515:267",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "58:86:267",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "68:29:267",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "90:6:267"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "77:12:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "77:20:267"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "68:5:267"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "132:5:267"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_bytes4",
                      "nodeType": "YulIdentifier",
                      "src": "106:25:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "106:32:267"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "106:32:267"
                }
              ]
            },
            "name": "abi_decode_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "36:6:267",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "44:3:267",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "52:5:267",
                "type": ""
              }
            ],
            "src": "7:137:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "215:262:267",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "261:83:267",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                            "nodeType": "YulIdentifier",
                            "src": "263:77:267"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "263:79:267"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "263:79:267"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "236:7:267"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "245:9:267"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "232:3:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "232:23:267"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "257:2:267",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "228:3:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "228:32:267"
                  },
                  "nodeType": "YulIf",
                  "src": "225:119:267"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "354:116:267",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "369:15:267",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "383:1:267",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "373:6:267",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "398:62:267",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "432:9:267"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "443:6:267"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "428:3:267"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "428:22:267"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "452:7:267"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_bytes4",
                          "nodeType": "YulIdentifier",
                          "src": "408:19:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "408:52:267"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "398:6:267"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "185:9:267",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "196:7:267",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "208:6:267",
                "type": ""
              }
            ],
            "src": "150:327:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "542:50:267",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "559:3:267"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "579:5:267"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_bool",
                          "nodeType": "YulIdentifier",
                          "src": "564:14:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "564:21:267"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "552:6:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "552:34:267"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "552:34:267"
                }
              ]
            },
            "name": "abi_encode_t_bool_to_t_bool_fromStack",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "530:5:267",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "537:3:267",
                "type": ""
              }
            ],
            "src": "483:109:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "690:118:267",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "700:26:267",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "712:9:267"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "723:2:267",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "708:3:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "708:18:267"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "700:4:267"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "774:6:267"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "787:9:267"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "798:1:267",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "783:3:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "783:17:267"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_bool_to_t_bool_fromStack",
                      "nodeType": "YulIdentifier",
                      "src": "736:37:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "736:65:267"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "736:65:267"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "662:9:267",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "674:6:267",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "685:4:267",
                "type": ""
              }
            ],
            "src": "598:210:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "854:35:267",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "864:19:267",
                  "value": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "880:2:267",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "874:5:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "874:9:267"
                  },
                  "variableNames": [
                    {
                      "name": "memPtr",
                      "nodeType": "YulIdentifier",
                      "src": "864:6:267"
                    }
                  ]
                }
              ]
            },
            "name": "allocate_unbounded",
            "nodeType": "YulFunctionDefinition",
            "returnVariables": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "847:6:267",
                "type": ""
              }
            ],
            "src": "814:75:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "937:48:267",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "947:32:267",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "972:5:267"
                          }
                        ],
                        "functionName": {
                          "name": "iszero",
                          "nodeType": "YulIdentifier",
                          "src": "965:6:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "965:13:267"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "958:6:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "958:21:267"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "947:7:267"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_bool",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "919:5:267",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "929:7:267",
                "type": ""
              }
            ],
            "src": "895:90:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1035:105:267",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "1045:89:267",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "1060:5:267"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1067:66:267",
                        "type": "",
                        "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "1056:3:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1056:78:267"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "1045:7:267"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1017:5:267",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "1027:7:267",
                "type": ""
              }
            ],
            "src": "991:149:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1235:28:267",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1252:1:267",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1255:1:267",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1245:6:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1245:12:267"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1245:12:267"
                }
              ]
            },
            "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
            "nodeType": "YulFunctionDefinition",
            "src": "1146:117:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1358:28:267",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1375:1:267",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1378:1:267",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1368:6:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1368:12:267"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1368:12:267"
                }
              ]
            },
            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
            "nodeType": "YulFunctionDefinition",
            "src": "1269:117:267"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1434:78:267",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1490:16:267",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1499:1:267",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1502:1:267",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1492:6:267"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1492:12:267"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1492:12:267"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1457:5:267"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1481:5:267"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "1464:16:267"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1464:23:267"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1454:2:267"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1454:34:267"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1447:6:267"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1447:42:267"
                  },
                  "nodeType": "YulIf",
                  "src": "1444:62:267"
                }
              ]
            },
            "name": "validator_revert_t_bytes4",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1427:5:267",
                "type": ""
              }
            ],
            "src": "1392:120:267"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 267,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "109:34:45:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "109:34:45:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;787:157:163;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;872:4;911:25;896:40;;;:11;:40;;;;889:47;;787:157;;;:::o;7:137:267:-;52:5;90:6;77:20;68:29;;106:32;132:5;106:32;:::i;:::-;7:137;;;;:::o;150:327::-;208:6;257:2;245:9;236:7;232:23;228:32;225:119;;;263:79;;:::i;:::-;225:119;383:1;408:52;452:7;443:6;432:9;428:22;408:52;:::i;:::-;398:62;;354:116;150:327;;;;:::o;483:109::-;564:21;579:5;564:21;:::i;:::-;559:3;552:34;483:109;;:::o;598:210::-;685:4;723:2;712:9;708:18;700:26;;736:65;798:1;787:9;783:17;774:6;736:65;:::i;:::-;598:210;;;;:::o;895:90::-;929:7;972:5;965:13;958:21;947:32;;895:90;;;:::o;991:149::-;1027:7;1067:66;1060:5;1056:78;1045:89;;991:149;;;:::o;1269:117::-;1378:1;1375;1368:12;1392:120;1464:23;1481:5;1464:23;:::i;:::-;1457:5;1454:34;1444:62;;1502:1;1499;1492:12;1444:62;1392:120;:::o",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/introspection/ERC165.sol\";\r\n\r\ncontract ERC165Mock is ERC165 {\r\n}\r\n",
  "sourcePath": "C:/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/mocks/ERC165Mock.sol",
  "ast": {
    "absolutePath": "/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/mocks/ERC165Mock.sol",
    "exportedSymbols": {
      "ERC165": [
        21889
      ],
      "ERC165Mock": [
        7047
      ],
      "IERC165": [
        22215
      ]
    },
    "id": 7048,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7043,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:45"
      },
      {
        "absolutePath": "/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/utils/introspection/ERC165.sol",
        "file": "../utils/introspection/ERC165.sol",
        "id": 7044,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7048,
        "sourceUnit": 21890,
        "src": "62:43:45",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7045,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21889,
              "src": "132:6:45"
            },
            "id": 7046,
            "nodeType": "InheritanceSpecifier",
            "src": "132:6:45"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 7047,
        "linearizedBaseContracts": [
          7047,
          21889,
          22215
        ],
        "name": "ERC165Mock",
        "nameLocation": "118:10:45",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 7048,
        "src": "109:34:45",
        "usedErrors": []
      }
    ],
    "src": "35:110:45"
  },
  "legacyAST": {
    "absolutePath": "/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/mocks/ERC165Mock.sol",
    "exportedSymbols": {
      "ERC165": [
        21889
      ],
      "ERC165Mock": [
        7047
      ],
      "IERC165": [
        22215
      ]
    },
    "id": 7048,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 7043,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:45"
      },
      {
        "absolutePath": "/C/Users/Husnain/Documents/Projects/Fanbase/fanbase/packages/ethereum/contracts/solidity/openzeppelin/contracts/utils/introspection/ERC165.sol",
        "file": "../utils/introspection/ERC165.sol",
        "id": 7044,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 7048,
        "sourceUnit": 21890,
        "src": "62:43:45",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 7045,
              "name": "ERC165",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21889,
              "src": "132:6:45"
            },
            "id": 7046,
            "nodeType": "InheritanceSpecifier",
            "src": "132:6:45"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 7047,
        "linearizedBaseContracts": [
          7047,
          21889,
          22215
        ],
        "name": "ERC165Mock",
        "nameLocation": "118:10:45",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 7048,
        "src": "109:34:45",
        "usedErrors": []
      }
    ],
    "src": "35:110:45"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.1",
  "updatedAt": "2021-08-24T16:48:46.804Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}